----- Credit: Krystela of Asura | Last Update: 29 december 2015 ---->
---- .:: This was entirely created by me, it's not based off anyone's file ::. ---->
---- Always visit http://pastebin.com/u/KrystelaRose to look for possible updates ---->
---- .:: Please leave credit where it's due ::. ---->
---- .:: If you have any problem contact me via ffxiah: http://www.ffxiah.com/player/Asura/Krystela ::. ---->
                    ---- This lua was customly made for Cbbs of Asura ----

function user_unload()	
    send_command('unbind ^f10')
    send_command('unbind ^f11')	
    send_command('unbind ^f12')		
end

function job_setup()
 	include('caster_buffWatcherPLD.lua')
	include('common_info.statusPLD.lua')	
buffWatcher.watchList = 
{
                       ["Enlight"]="Enlight",
                       ["Enmity Boost"]="Crusade",
                       ["Phalanx"]="Phalanx",
                       ["Protect"]="Protect V",
                       ["Shell"]="Shell IV",				   
}
end

function get_sets()
-- Binds for modes
	send_command('bind ^f10 gs c C10')
	send_command('bind ^f11 gs c C11')
	send_command('bind ^f12 gs c C12')	
-- Modes --
    TankIndex = 1
    TankArray = {"TP","PDT","MDT"} -- Press ctrl + F10 to circle through Tank modes --
	Capacity = 'OFF' -- Press ctrl + F11 to have Capacity cape on while Idle --
	DT = 'OFF' -- Press ctrl + F12 to have DT/Kiting on --
-- Set macro book/set --
    send_command('input /macro book 2;wait .1;input /macro set 1') -- set macro book/set here --	
-- Spell Maps --
    BlueMagic = S{"Jettatura","Sheep Song","Soporific","Blank Gaze","Geist Wall"}	
-- Area mapping --	
    Town = S{"Ru'Lude Gardens","Upper Jeuno","Lower Jeuno","Port Jeuno","Port Windurst","Windurst Waters","Windurst Woods","Windurst Walls","Heavens Tower",
	         "Port San d'Oria","Northern San d'Oria","Southern San d'Oria","Port Bastok","Bastok Markets","Bastok Mines","Metalworks","Aht Urhgan Whitegate",
	         "Tavnazian Safehold","Nashmau","Selbina","Mhaura","Norg","Eastern Adoulin","Western Adoulin","Kazham","Heavens Tower"}

---- .:: TP Sets ::. ----->
    sets.engaged = {}
	sets.engaged.TP = {
    sub="Aegis",
    ammo="Ginsen",
    head="Flam. Zucchetto +1",
    body="Flamma Korazin +1",
    hands="Flam. Manopolas +1",
    legs="Flamma Dirs +1",
    feet="Flam. Gambieras +1",
    neck="Asperity Necklace",
    waist="Windbuffet Belt +1",
    left_ear="Steelflash Earring",
    right_ear="Bladeborn Earring",
    left_ring="Rajas Ring",
    right_ring="Petrov Ring",
    back="Rudianos's Mantle", 
	}
	sets.engaged.PDT = {
    ammo="Staunch Tathlum",
    head="Souveran Schaller",
    body= "Rev. Surcoat +2",
    hands={ name="Souv. Handschuhs", augments={'HP+50','Shield skill +10','Phys. dmg. taken -3',}},
    legs={ name="Souveran Diechlings", augments={'HP+80','Enmity+7','Potency of "Cure" effect received +10%',}},
    feet="Souveran Schuhs",
    neck="Loricate Torque +1",
    waist="Flume Belt +1",
    left_ear="Etiolation Earring",
    right_ear="Thureous Earring",
    left_ring="Vocane Ring",
    right_ring="Defending Ring",
    back="Solemnity Cape",
}
	sets.engaged.MDT = {
    sub="Aegis",
    ammo="Staunch Tathlum",
    head="Sulevia's Mask +1",
    body="Sulevia's Plate. +1",
    hands="Sulev. Gauntlets +1",
    legs="Flamma Dirs +1",
    feet="Sulev. Leggings +1",
    neck="Asperity Necklace",
    waist="Ninurta's Sash",
    left_ear="Steelflash Earring",
    right_ear="Bladeborn Earring",
    left_ring="Rajas Ring",
    right_ring="Petrov Ring",
    back={ name="Rudianos's Mantle", augments={'HP+60','Accuracy+20 Attack+20','HP+6','Enmity+10',}},
}	
---- .:: Job Abilities Sets ::. ---->
    sets.JA = {}
    -- Warrior's Abilities --
    sets.JA['Provoke'] = {
		head="Loess barbuta +1",	
		neck="Unmoving Collar +1",	
		ear1="Pluto's Pearl",
		ear2="Cryptic Earring",	
		body="Souveran Cuirass +1",	
		hands="Souveran Handschuhs",		
		ring1="Eihwaz Ring",
		ring2="Apeile Ring +1",
		back="Weard Mantle",
		feet="Souveran Schuhs",
		legs="Souveran Diechlings"} 
    -- Paladin's Abilities --
	sets.JA['Invicible'] = {
		head="Loess barbuta +1",
		neck="Unmoving Collar +1",
		ear1="Pluto's Pearl",
		ear2="Cryptic Earring",		
		body="Souveran Cuirass +1",
		hands="Souveran Handschuhs",		
		ring1="Eihwaz Ring",
		ring2="Apeile Ring +1",		
		back="Weard Mantle",
		legs="Caballarius Breeches +1",
		feet="Souveran Schuhs"}
	sets.JA['Holy Circle'] = {}
	sets.JA['Shield Bash'] = {
		head="Loess barbuta +1",
		neck="Unmoving Collar +1",
		ear1="Pluto's Pearl",
		ear2="Cryptic Earring",	
		body="Souveran Cuirass +1",		
		hands="Souveran Handschuhs",		
		ring1="Eihwaz Ring",
		ring2="Apeile Ring +1",
		back="Weard Mantle",
		legs="Souveran Diechlings +1",
		feet="Souveran Schuhs"}
	sets.JA['Sentinel'] = {
		head="Loess barbuta +1",
		neck="Unmoving Collar +1",
		ear1="Pluto's Pearl",
		ear2="Cryptic Earring",		
		body="Souveran Cuirass +1",
		hands="Souveran Handschuhs",		
		ring1="Eihwaz Ring",
		ring2="Apeile Ring +1",	
		back="Weard Mantle",	
		legs="Souveran Diechlings",		
        feet="Caballarius Leggings +1"}
	sets.JA['Cover'] = {}
	sets.JA['Rampart'] = {
		head="Caballarius Coronet +1",
		neck="Unmoving Collar +1",	
		ear1="Pluto's Pearl",
		ear2="Cryptic Earring",	
		body="Souveran Cuirass +1",	
		hands="Souveran Handschuhs",		
		ring1="Eihwaz Ring",
		ring2="Apeile Ring +1",
		back="Weard Mantle",
		feet="Souveran Schuhs",
		legs="Souveran Diechlings"}
  	sets.JA['Fealty'] = {
		head="Loess barbuta +1",
		neck="Unmoving Collar +1",
		ear1="Pluto's Pearl",
		ear2="Cryptic Earring",		
		body="Caballarius Surcoat +1",
		hands="Souveran Handschuhs",		
		ring1="Eihwaz Ring",
		ring2="Apeile Ring +1",
		back="Weard Mantle",
		legs="Souveran Diechlings",
		feet="Souveran Schuhs"}
	sets.JA['Chivalry'] = {}
	sets.JA['Divine Emblem'] = {}
---- .:: Weapon Skill Sets ::. ---->
    -- Generic Set --
    sets.WS = {
		head="Valorous mask",
		neck="Fotia Gorget",
		ear1="Moonshade Earring",
		ear2="Ishvara Earring",		
		body="Valorous Mail",
		hands="Odyssean Gauntlets",
		ring1="Karieyh Ring",
		ring2="Ifrit Ring +1",	
		back="Phalangite Mantle",	
		waist="Fotia Belt",		
		legs="Odyssean Cuisses",
		feet="Valorous greaves"}
	-- Specific Sets --
	sets.WS['Savage Blade'] = set_combine(sets.WS, {})	
	sets.WS['Chant du Cygne'] = set_combine(sets.WS, {})
	sets.WS['Atonement'] = set_combine(sets.WS, {})
	sets.WS['Requiescat'] = set_combine(sets.WS, {})
	sets.WS['Knights of Round'] = set_combine(sets.WS, {})
---- .:: Precast Sets ::. ---->
	sets.precast = {}
	sets.precast.FC = {
		ammo="Impatiens",	
		head="Carmine Mask",
		neck="Orunmila's Torque",	
		ear1="Loquac. Earring",
		ear2="Enchntr. Earring +1",		
		body="Odyssean Chestplate",
		hands="Leyline Gloves",
		ring1="Prolix Ring",
		ring2="Lebeche Ring",
		back="Xucau Mantle",
		waist="Siegel Sash",		
		legs="Enif cosciales",
        feet="Odyssean Greaves"}
	sets.precast['Utsusemi'] = set_combine(sets.precast.FC, {})		
---- .:: Midcast Sets ::. ---->	
	sets.midcast = {}
    sets.midcast.Cure = {
		ammo="Impatiens",
		head="Loess barbuta +1",
		neck="Unmoving Collar +1",
		ear1="Pluto's Pearl",
		ear2="Cryptic Earring",		
		body="Souveran Cuirass +1",
		hands="Souveran Handschuhs",
		ring1="Eihwaz Ring",
		ring2="Apeile Ring +1",
		back="Solemnity Cape",		
		legs="Souveran Diechlings",
		feet="Souveran Schuhs"}
	sets.midcast.Enmity = {
		head="Loess barbuta +1",
		neck="Unmoving Collar +1",	
		ear1="Pluto's Pearl",
		ear2="Cryptic Earring",	
		body="Souveran Cuirass +1",	
		hands="Souveran Handschuhs",		
		ring1="Eihwaz Ring",
		ring2="Apeile Ring +1",
		back={ name="Rudianos's Mantle", augments={'HP+60','Accuracy+20 Attack+20','HP+6','Enmity+10',}},
		legs="Souveran Diechlings",
		feet="Souveran Schuhs"}	
    sets.midcast['Flash'] = set_combine(sets.midcast.Enmity, {
		head="Loess barbuta +1",
		neck="Unmoving Collar +1",	
		ear1="Pluto's Pearl",
		ear2="Cryptic Earring",	
		body="Souveran Cuirass +1",	
		hands="Souveran Handschuhs +1",		
		ring1="Eihwaz Ring",
		ring2="Apeile Ring +1",
		back={ name="Rudianos's Mantle", augments={'HP+60','Accuracy+20 Attack+20','HP+6','Enmity+10',}},
		legs="Souveran Diechlings",
		feet="Souveran Schuhs"})
	sets.midcast.Divine = {		
		ammo="Impatiens",
		head="Carmine Mask",
		neck="Unmoving Collar +1",	
		ear1="Etiolation Earring",
		ear2="Cryptic Earring",		
		body="Souv. Cuirass +1",
		hands="Souv. Handsch. +1",
		ring1="Eihwaz Ring",
		ring2="Apeile Ring +1",	
		back="Weard Mantle",		
		legs="Souv. Diechlings +1",
		feet="Souveran Schuhs"}	
    sets.midcast.Enhancing = {
		ammo="Impatiens",
		head="Carmine Mask",
		body="Souveran Cuirass +1",
		hands="Souveran Handschuhs",
		ring1="Eihwaz Ring",
		back="Weard Mantle",		
		legs="Carmine cuisses +1",
		feet="Souveran Schuhs +1"}
	sets.midcast['Utsusemi'] = {}	
---- .:: Idle Sets ::. ---->
    sets.aftercast = {}
	sets.aftercast.Idle = {
    sub="Aegis",
    ammo="Staunch Tathlum",
    head={ name="Cab. Coronet +1", augments={'Enhances "Iron Will" effect',}},
    body="Rev. Surcoat +2",
    hands={ name="Cab. Gauntlets +1", augments={'Enhances "Chivalry" effect',}},
    legs= "Carmine Cuisses +1",
    feet={ name="Cab. Leggings +1", augments={'Enhances "Guardian" effect',}},
    neck="Loricate Torque +1",
    waist="Flume Belt +1",
    left_ear="Etiolation Earring",
    right_ear="Thureous Earring",
    left_ring="Vocane Ring",
    right_ring="Defending Ring",
    back="Solemnity Cape",
}
	sets.aftercast.Town = {legs="Carmine Cuisses +1"}
	sets.aftercast.DT = set_combine(sets.aftercast.Idle, {
		range=empty,
		ammo="Homiliary",
		head="Souveran Schaller +1",
		neck="Loricate Torque +1",	
		ear1="Etiolation Earring",
		ear2="Telos Earring",		
		body="Souveran Cuirass +1",
		hands="Souveran Handschuhs +1",
		ring1="Eihwaz Ring",
		ring2="Defending Ring",	
		back="Xucau Mantle",		
		waist="Eschan Stone",		
		legs="Carmine Cuisses +1",
		feet="Souveran Schuhs +1"})	
end
---- .::Pretarget Functions::. ---->
function pretarget(spell,action)
-- Auto Echo drop --
    if spell.action_type == 'Magic' and buffactive['Silence'] then 
        cancel_spell()
        send_command('input /item "Echo Drops" <me>')
	end
end	
-- Precast Functions --
function precast(spell,action)
    -- Warrior Ability --
    if spell.english == 'Provoke' then
	    equip(sets.JA[spell.english])		
	-- Paladin Abilities --
	elseif spell.type == 'JobAbility' then
	    equip(sets.JA[spell.english])
	else
        equip(sets.JA)
	end	
    -- Weapon Skill --
    if spell.type == 'WeaponSkill' then
        equip(sets.WS[spell.english])
	else
        equip(sets.WS)
	end	
	-- Magic Spells
    if spell.action_type == 'Magic' then	
	    equip(sets.precast.FC)
		if string.find(spell.english, 'Utsusemi') then
		    equip(sets.precast['Utsusemi'])
		end
	end	
end	
-- Midcast Functions --
function midcast(spell,action)
    if spell.skill == 'Divine Magic' then
	    equip(sets.midcast.Divine)
		if spell.english == 'Flash' then
		    equip(sets.midcast['Flash'])
	    elseif buffactive['Divine Emblem'] then
		    if spell.english == 'Flash' then
		        equip(sets.midcast['Flash'], {feet=""})
		    else
                equip(sets.midcast.Divine, {feet=""})
		    end
		end	
    elseif string.find(spell.english,'Cure') then
		equip(sets.midcast.Cure)
    elseif spell.type == 'Enhancing Magic' then
        equip(sets.midcast.Enhancing)
    elseif string.find(spell.english, 'Utsusemi') then
		equip(sets.midcast['Utsusemi'])
	elseif spell.type == 'Blue Magic' then
        equip(sets.midcast.Enmity)	
	end
end	
-- Aftercast Functions --
function aftercast(spell,action)
    if player.status == 'Idle' then
	    equip(sets.aftercast.Idle)
		if DT == 'ON' then
		    equip(sets.aftercast.DT)
		elseif Capacity == 'ON' then
            equip(sets.aftercast.Idle, {back="Mecistopins Mantle"})
		end
	    status_change(player.status)		
	elseif player.status == 'Engaged' then
	    if TankArray[TankIndex] == 'TP' then
            equip(sets.engaged.TP)
			if buffactive['Doom'] then
			    equip(sets.engaged.TP, {ring=""})
			elseif buffactive['Cover'] then
			    equip(sets.engaged.TP, {head="",body=""})			
			elseif capacity == 'ON' then
			    equip(sets.engaged.TP, {back="Mecistopins Mantle"})
			end
	    status_change(player.status)			
 	    elseif TankArray[TankIndex] == 'PDT' then      			
         	equip(sets.engaged.PDT)
			if buffactive['Doom'] then
			    equip(sets.engaged.PDT, {ring=""})			
			elseif buffactive['Cover'] then
			    equip(sets.engaged.PDT, {head="",body=""})
            end	
	    status_change(player.status)			
	    elseif TankArray[TankIndex] == 'MDT' then			
		    equip(sets.engaged.MDT)
			if buffactive['Doom'] then
			    equip(sets.engaged.MDT, {ring=""})			
			elseif buffactive['Cover'] then
			    equip(sets.engaged.MDT, {head="",body=""})
            end
	    status_change(player.status)			
		end
	    status_change(player.status)
	elseif Town:contains(world.zone) then
        equip(sets.aftercast.Town)
	    status_change(player.status)		
	end
end
-- Status Changes Functions --
function status_change(new,tab,old)	
    if new == 'Idle' then
	    equip(sets.aftercast.Idle)
		if DT == 'ON' then
		    equip(sets.aftercast.DT)
		elseif Capacity == 'ON' then
            equip(sets.aftercast.Idle, {back="Mecistopins Mantle"})
		end		
	elseif new == 'Engaged' then
	    if TankArray[TankIndex] == 'TP' then
            equip(sets.engaged.TP)
			if buffactive['Doom'] then
			    equip(sets.engaged.TP, {ring=""})			
			elseif buffactive['Cover'] then
			    equip(sets.engaged.TP, {head="",body=""})
			elseif capacity == 'ON' then
			    equip(sets.engaged.TP, {back="Mecistopins Mantle"})		
			end
 	    elseif TankArray[TankIndex] == 'PDT' then      			
         	equip(sets.engaged.PDT)
			if buffactive['Doom'] then
			    equip(sets.engaged.PDT, {ring=""})			
			elseif buffactive['Cover'] then
			    equip(sets.engaged.PDT, {head="",body=""})
			end	
	    elseif TankArray[TankIndex] == 'MDT' then			
		    equip(sets.engaged.MDT)
			if buffactive['Doom'] then
			    equip(sets.engaged.MDT, {ring=""})			
			elseif buffactive['Cover'] then
			    equip(sets.engaged.MDT, {head="",body=""})
			end	
		end
	elseif Town:contains(world.zone) then
        equip(sets.aftercast.Town)		
	end
end
-- Modes functions --
function self_command(command)	
	if command == 'C10' then -- Tank Cycle --
        TankIndex = (TankIndex % #TankArray) + 1
        status_change(player.status)
        add_to_chat(158,'Tank Set to: ' .. TankArray[TankIndex])			
    elseif command == 'C11' then -- Capacity toggle --
        if Capacity == 'ON' then
            Capacity = 'OFF'
            add_to_chat(123,'Capacity Set: [OFF]')
        else
            Capacity = 'ON'
            add_to_chat(158,'Capacity Set: [ON]')
        end
        status_change(player.status)
	elseif command == 'C12' then -- Defense Cycle --	
        if DT == 'ON' then
            DT = 'OFF'
            add_to_chat(123,'DT/Kiting Set: [OFF]')
        else
            DT = 'ON'
            add_to_chat(158,'DT/Kiting Set: [ON]')
	        equip(sets.aftercast.DT)			
        end
        status_change(player.status)		
	end
end	

function job_buff_change(buff, gain)
        if buff == "cover" then
                if gain then
                        equip(sets.buff['Cover'])
                        disable('Body','Head')
                else
                        enable('Body','Head')
                        handle_equipping_gear(player.status)
                end
        elseif buff == "doom" then
                if gain then           
                        equip(sets.Doom)
                        send_command('@input /p Doomed, please Cursna.')
                        disable('legs','ring1','ring2','waist')
                elseif not gain and not player.status == "Dead" and not player.status == "Engaged Dead" then
                        enable('legs','ring1','ring2','waist')
                        send_command('input /p Doom removed, Thank you.')
                        handle_equipping_gear(player.status)
                else
                        enable('legs','ring1','ring2','waist')
                        send_command('input /p '..player.name..' is no longer Doom Thank you !')
                end
				 elseif buff == "petrification" then
                if gain then    
						equip(sets.Petri)
                        disable('back')				
                        send_command('@input /p Petrification, please Stona.')		
				else
                        enable('back')
                        send_command('input /p '..player.name..' is no longer Petrify Thank you !')
					end
				 elseif buff == "Charm" then
				 if gain then  			
                        send_command('@input /p Charmd, please Sleep me.')		
				else	
                        send_command('input /p '..player.name..' is no longer Charmed, please wake me up!')
					end
				elseif buff == "paralysis" then
                 if gain then
                        
                        send_command('@input /p '..player.name..' Paralysed, please Paralyna.')
                else                        
                        send_command('input /p '..player.name..' is no longer Paralysed Thank you !')
                    end	
        end
	for index,value in pairs(buffWatcher.watchList) do
    if index==buff then
      buffWatch()
      break
    end
  end
end
-- Automatically changes Idle gears if you zone in or out of town --
windower.register_event('zone change', function()
	if Town:contains(world.zone) then
        equip(sets.aftercast.Town)
    else
        equip(sets.aftercast.Idle)
    end	
end)
